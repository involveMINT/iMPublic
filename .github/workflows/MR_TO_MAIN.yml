name: Merge To Main

on:
  pull_request:
    branches:
      - main

env:
  TEST_GCP_PROJECT: ${{ vars.IM_TEST_PROJECT_ID }}
  TEST_FIREBASE_PROJECT: ${{ vars.IM_TEST_PROJECT_ID }}
  NODE_VERSION: 22.13.0
  DB_HOST: ${{ secrets.DB_HOST }}
  DB_PORT: ${{ secrets.DB_PORT }}
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DB_NAME: ${{ secrets.DB_NAME }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


jobs:
  deploy-test:
    name: ‚ñ∂Ô∏è Deploy ‚Üí Test (MANUAL)
    environment: Test
    runs-on: ubuntu-latest
    concurrency:
      group: test-environment
      # allow only one "waiting for approval" + "running" job in that group
      cancel-in-progress: false
    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Determine new version name
        id: get-version
        run: |
          TAG=${GITHUB_REF#refs/}
          TAG=${TAG#merge}
          SHORT_SHA=${GITHUB_SHA:0:7}
          V="${TAG,,}-${SHORT_SHA}"
          V=${V//[^a-z0-9-]/-}
          echo $V
          echo "NEW_VERSION=${V}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Install dependencies
        run: npm ci

      - name: Install nx@12.3.6
        run: npm install -g nx@12.3.6

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Generate API Environment (test)
        run: npx ts-node ./util/generate_environment.ts generate test
        env:
          INVOLVEMINT_SETTINGS: ${{ secrets.INVOLVEMINT_TEST_SETTINGS_SERVER }}
      
      - name: Sync DB migrations (loop)
        run: |
          set -e
          MAX=5
          COUNT=0
          BACKED_UP=false

          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:$GITHUB_TOKEN@github.com/${{ github.repository }}

          while [ $COUNT -lt $MAX ]; do
            echo "üîÅ Loop attempt $((COUNT+1))"

            echo "üîç Checking for unapplied migrations..."
            npx ts-node util/check_for_pending_migrations.ts > pending.log
            PENDING=$(grep 'MIGRATION_PENDING=true' pending.log || echo "")

            if [ -n "$PENDING" ]; then
              if [ "$BACKED_UP" = false ]; then
                echo "üì¶ Backing up the database before first change..."
                if ! PGPASSWORD="$DB_PASSWORD" pg_dump -h "$DB_HOST" -U "$DB_USER" -p "$DB_PORT" -Fc "$DB_NAME" > db_backup.dump; then
                  echo "‚ùå Failed to take database backup. Aborting."
                  exit 1
                fi
                BACKED_UP=true
                echo "DB_BACKED_UP=true" >> $GITHUB_OUTPUT
              fi
            fi

            if [ -n "$PENDING" ]; then
              echo "‚öôÔ∏è Applying unapplied migrations..."
              npx typeorm migration:run
              COUNT=$((COUNT+1))
              continue
            fi

            echo "üì¶ Checking for missing migrations..."
            npx ts-node util/detect_db_entity_drift.ts > drift.log
            NEEDED=$(grep 'MIGRATION_NEEDED=true' drift.log || echo "")

            if [ -n "$NEEDED" ]; then
              if [ "$BACKED_UP" = false ]; then
                echo "üì¶ Backing up the database before first change..."
                if ! PGPASSWORD="$DB_PASSWORD" pg_dump -h "$DB_HOST" -U "$DB_USER" -p "$DB_PORT" -Fc "$DB_NAME" > db_backup.dump; then
                  echo "‚ùå Failed to take database backup. Aborting."
                  exit 1
                fi
                BACKED_UP=true
                echo "DB_BACKED_UP=true" >> $GITHUB_OUTPUT
              fi
              echo "üíæ Committing generated migration..."
              git add src/migration/*.ts
              git commit -m "chore: auto-generated migration"
              git push origin HEAD

              echo "‚öôÔ∏è Applying new migration..."
              npx typeorm migration:run
              COUNT=$((COUNT+1))
              continue
            fi

            echo "‚úÖ Schema and DB are in sync."
            break
          done

          if [ $COUNT -eq $MAX ]; then
            echo "‚ùå Migration loop exceeded max attempts. Rolling back..."
            if [ -f db_backup.dump ]; then
              echo "‚ôªÔ∏è Restoring database from backup..."
              PGPASSWORD="$DB_PASSWORD" pg_restore -h "$DB_HOST" -U "$DB_USER" -p "$DB_PORT" -d "$DB_NAME" --clean db_backup.dump
            else
              echo "‚ö†Ô∏è No backup file found. Cannot restore DB."
            fi
            exit 1
          fi
      
      - name: Build API (test)
        run: |
          export NODE_OPTIONS=--openssl-legacy-provider
          nx run-many --target=build --projects=api,involvemint --configuration=test --skip-nx-cache

      - name: üöÄ Deploy API to App Engine (Test)
        id: deploy-api
        run: |
          # sanitize
          gcloud config set project ${{ env.TEST_GCP_PROJECT }}
          gcloud app deploy app.yaml \
            --stop-previous-version \
            --quiet \
            --version=${{ steps.get-version.outputs.NEW_VERSION }}

      - name: Delete API Environment (test)
        run: npx ts-node ./util/generate_environment.ts delete test
      
      - name: Generate Client Environment (test)
        run: npx ts-node ./util/generate_environment.ts generate test
        env:
          INVOLVEMINT_SETTINGS: ${{ secrets.INVOLVEMINT_TEST_SETTINGS_CLIENT }}
      
      - name: Build Client (test)
        run: |
          export NODE_OPTIONS=--openssl-legacy-provider
          nx run-many --target=build --projects=involvemint --configuration=test --skip-nx-cache

      - name: Install firebase-tools@13.29.0
        run: npm install -g firebase-tools@13.29.0

      - name: üöÄ Deploy Client to Firebase
        run: |
          firebase use ${{ env.TEST_FIREBASE_PROJECT }}
          firebase deploy --message "${{ steps.get-version.outputs.NEW_VERSION }}"

      - name: Roll back to previous version on failure
        if: ${{ failure() && steps.deploy-api.outcome == 'success' }}
        run: |
          # 1) List the last two deployed versions (sorted by creation time)
          PREV=$(gcloud app versions list \
            --service=default \
            --format="value(version.id)" \
            --sort-by="~version.createTime" \
            --limit=2 \
          )
          # 2) The first returned is the NEW (failed) version; the second is the one before it.
          #    So split on newline, take the second line.
          PREV_VERSION=$(echo "$PREV" | sed -n '2p')

          if [[ -z "$PREV_VERSION" ]]; then
            echo "‚ùå No previous version found to roll back to."
            exit 1
          fi

          echo "üîÑ Rolling back to version: $PREV_VERSION"
          gcloud app services set-traffic default \
            --splits="$PREV_VERSION=1" \
            --quiet
        shell: bash

      - name: Roll back database on deploy failure
        if: failure() && hashFiles('db_backup.dump') != ''
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
        run: |
          echo "‚ùå Deployment failed. Rolling back database..."
          if [ -f db_backup.dump ]; then
            PGPASSWORD="$DB_PASSWORD" pg_restore -h "$DB_HOST" -U "$DB_USER" -p "$DB_PORT" -d "$DB_NAME" --clean db_backup.dump
          else
            echo "‚ö†Ô∏è No backup file found. Cannot restore DB."
          fi
          exit 1

  test-env-verified:
    name: ‚úÖ Approve Test Env Validation (MANUAL)
    environment: Test
    runs-on: ubuntu-latest
    needs: deploy-test
    steps:
      - run: echo "Testing in TEST environment has been completed, approved by."



