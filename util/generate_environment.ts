import * as fs from 'fs';
import * as path from 'path';
import { Env } from '../libs/shared/domain/src/lib/environments/environment.interface';


/**
 * Generates an Angular environment file matching the Env interface.
 * @param configName The target configuration: 'test', 'prod', or 'local'.
 */
function generateEnvironmentFile(configName: string) {

  const envData: Env = JSON.parse(process.env.INVOLVEMINT_SETTINGS || '{}');
  
  /*{
    const isProd = configName === 'prod';

    environment: isProd ? 'production' : configName === 'test' ? 'test' : 'local',
    host: process.env.HOST || '',
    apiUrl: process.env.API_URL || '',
    appUrl: process.env.APP_URL || '',
    storageBucket: process.env.STORAGE_BUCKET || '',
    adminPasswordHash: isFrontEnd ? '' : process.env.ADMIN_PASSWORD_HASH || '',
    gcpApiKey: process.env.GCP_API_KEY || '',
    typeOrmConfig: JSON.parse(process.env.TYPEORM_CONFIG || '{}'),
    firebaseEnv: JSON.parse(process.env.FIREBASE_ENV || '{}'),
    mailgun: JSON.parse(process.env.MAILGUN || '{}'),
    twilio: JSON.parse(process.env.TWILIO || '{}'),
    gcp: JSON.parse(process.env.GCP || '{}'),
    scrypt: JSON.parse(process.env.SCRYPT || '{}') as FirebaseScryptOptions,
    defaultLocalAddress: JSON.parse(process.env.DEFAULT_LOCAL_ADDRESS || '[]') as geocoder.Entry[]
  };*/

  const fileName = `environment.${configName}.ts`;
  const destPath = path.resolve(
    __dirname,
    `../libs/shared/domain/src/lib/environments/${fileName}`
  );

  const fileContent = `// This file is autogenerated. Do not edit directly.\n` +
    `import { Env } from './env.interface';\n\n` +
    `export const environment: Env = ${JSON.stringify(envData, null, 2)} as const;\n`;

  fs.writeFileSync(destPath, fileContent, { encoding: 'utf-8' });
  console.log(`✅ Generated ${fileName} at ${destPath}`);
}

// Entry point: first CLI arg is the config name (e.g. 'test', 'prod', or 'local')
const configName = process.argv[2] || 'test';

try {
  generateEnvironmentFile(configName);
} catch (err) {
  console.error('❌ Failed to generate environment file:', err);
  process.exit(1);
}
